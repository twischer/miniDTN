TARGET:=FreeRTOS
# TODO change to your ARM gcc toolchain path
TOOLCHAIN_ROOT:=/usr
TOOLCHAIN_PATH:=$(TOOLCHAIN_ROOT)/bin
TOOLCHAIN_PREFIX:=arm-none-eabi

# Optimization level, can be [0, 1, 2, 3, s].
# TODO use s
OPTLVL:=0
DBG:=-g

STARTUP	:= $(ROOT_DIR)/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc

FREERTOS:= Middlewares/Third_Party/FreeRTOS/Source
FATFS	:= Middlewares/Third_Party/FatFs/src
LWIP	:= Middlewares/Third_Party/LwIP

# TODO remove contiki lib, if everything was ported successfully
MODULES+= Src \
	$(FREERTOS) \
	$(FREERTOS)/CMSIS_RTOS \
	$(FREERTOS)/portable/GCC/ARM_CM4F \
	$(FATFS) \
	$(LWIP)/src/api \
	$(LWIP)/src/core \
	$(LWIP)/src/core/ipv4 \
	$(LWIP)/src/netif \
	$(LWIP)/system/OS \
	Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates \
	Drivers/STM32F4xx_HAL_Driver/Src \
	Libraries \
	Libraries/ub_lib \
	cpu/avr/radio/rf230bb \
	core/lib \
	core/net \
	core/net/uDTN

INC_DIRS+= Inc \
	$(FREERTOS)/include \
	$(FATFS)/drivers \
	$(LWIP)/src/include \
	$(LWIP)/src/include/ipv4 \
	$(LWIP)/system \
	Drivers/CMSIS/Device/ST/STM32F4xx/Include \
	Drivers/CMSIS/Include \
	Drivers/STM32F4xx_HAL_Driver/Inc \
	Libraries \
	core \
	core/net/mac \
	cpu/arm/stm32f103

	
LINKER_SCRIPT:=$(ROOT_DIR)/STM32F407VG_FLASH.ld

INCLUDE+=-I$(FREERTOS)/portable/GCC/ARM_CM4F
INCLUDE+=-I$(ROOT_DIR)/Libraries/ub_lib
INCLUDE+=-I$(ROOT_DIR)/config

SRC_DIRS:= $(addprefix $(ROOT_DIR)/,$(MODULES))
INC_DIRS+= $(MODULES)
INCLUDE+= $(addprefix -I$(ROOT_DIR)/,$(INC_DIRS))


BUILD_BASE = $(CURDIR)/build
BIN_DIR = $(CURDIR)/binary

BUILD_DIR := $(addprefix $(BUILD_BASE)/,$(MODULES))

# vpath is used so object files are written to the current directory instead
# of the same directory as their source files
vpath %.c $(ROOT_DIR)/Libraries/STM32F4xx_StdPeriph_Driver/src \
	$(ROOT_DIR)/Libraries/syscall \
	$(ROOT_DIR)/$(FREERTOS)/portable/MemMang \
	$(ROOT_DIR)/$(FATFS)/drivers \
	$(ROOT_DIR)/core/net/mac/ \
	$(SRC_DIRS)
	  

vpath %.s $(STARTUP)
ASRC=startup_stm32f407xx.s

# Project Source Files
SRC+=syscalls.c

# FreeRTOS Source Files
SRC+=heap_4.c

# Standard Peripheral Source Files
#SRC+=stm32f4xx_syscfg.c
#SRC+=misc.c
#SRC+=stm32f4xx_adc.c
#SRC+=stm32f4xx_dac.c
#SRC+=stm32f4xx_dma.c
#SRC+=stm32f4xx_exti.c
#SRC+=stm32f4xx_flash.c
#SRC+=stm32f4xx_gpio.c
#SRC+=stm32f4xx_i2c.c
#SRC+=stm32f4xx_rcc.c
#SRC+=stm32f4xx_spi.c
#SRC+=stm32f4xx_tim.c
#SRC+=stm32f4xx_usart.c
#SRC+=stm32f4xx_rng.c
SRC+=sd_diskio.c


# needed contiki mac files
SRC+=mac.c
SRC+=mac-sequence.c
SRC+=nullrdc.c
SRC+=frame802154.c
SRC+=framer.c
SRC+=framer-802154.c

# miniDTN files
SRC+= $(foreach sdir,$(MODULES),$(wildcard $(sdir)/*.c))


CDEFS=-DSTM32F407xx 
CDEFS+=-DUSE_STDPERIPH_DRIVER
CDEFS+=-DSTM32F4XX
CDEFS+=-DHSE_VALUE=8000000
CDEFS+=-D__FPU_PRESENT=1
CDEFS+=-D__FPU_USED=1
CDEFS+=-DARM_MATH_CM4

# Contiki definitions from old inga platform with an atmega128
CDEFS+=-DNETSTACK_CONF_WITH_DTN=1
CDEFS+=-DUIP_CONF_IPV6_RPL=0
CDEFS+=-DINGA_CONF_REVISION=INGA_V14

# TODO eemprom not suported at this time
#CDEFS+=-DCONTIKI_CONF_SETTINGS_MANAGER=1

CDEFS+=-DAUTO_CRC_PADDING=2
CDEFS+=-DRF230BB
CDEFS+=-DCONTIKI=1
CDEFS+=-DINGA_BOOTSCREEN_NETSTACK
CDEFS+=-DINGA_BOOTSCREEN
CDEFS+=-DINGA_BOOTSCREEN_RADIO


MCUFLAGS=-O$(OPTLVL) $(DBG) -MMD -std=gnu11 -Wall -mcpu=cortex-m4 -mthumb -mfpu=fpv4-sp-d16 -mfloat-abi=hard
CFLAGS+=$(MCUFLAGS) $(INCLUDE) $(CDEFS)

LDLIBS=-lc -lm -lnosys
LDFLAGS=$(MCUFLAGS) -specs=nano.specs -T$(LINKER_SCRIPT) $(LDLIBS) -Wl,--gc-sections

CC=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-gcc
LD=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-gcc
OBJCOPY=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-objcopy
AS=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-as
AR=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-ar
GDB=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-gdb

OBJ = $(SRC:%.c=$(BUILD_BASE)/%.o)

$(BUILD_BASE)/%.o: %.c
	@echo [CC] $(notdir $<)
	@$(CC) $(CFLAGS) $< -c -o $@


all: checkdirs $(OBJ)
	@echo [AS] $(ASRC)
	@$(AS) -o $(ASRC:%.s=$(BUILD_BASE)/%.o) $(STARTUP)/$(ASRC)
	@echo [LD] $(TARGET).elf
	@$(CC) -o $(BIN_DIR)/$(TARGET).elf $(LDFLAGS) $(OBJ) $(ASRC:%.s=$(BUILD_BASE)/%.o)
	@echo [OBJCOPY] $(TARGET).hex
	@$(OBJCOPY) -O ihex $(BIN_DIR)/$(TARGET).elf $(BIN_DIR)/$(TARGET).hex
	@echo [OBJCOPY] $(TARGET).bin
	@$(OBJCOPY) -O binary $(BIN_DIR)/$(TARGET).elf $(BIN_DIR)/$(TARGET).bin


checkdirs: $(BUILD_DIR) $(BIN_DIR)
#	@echo $(SRC)


$(BUILD_DIR) $(BIN_DIR):
	$(Q) mkdir -p $@


.PHONY: clean

clean:
	@echo [RM] OBJ
	@rm -f $(OBJ)
	@rm -f $(ASRC:%.s=$(BUILD_BASE)/%.o)
	@echo [RM] BIN
	@rm -f $(BIN_DIR)/$(TARGET).elf
	@rm -f $(BIN_DIR)/$(TARGET).hex
	@rm -f $(BIN_DIR)/$(TARGET).bin
	@rm -f -R $(BUILD_BASE)/*.o
	@rm -f -R $(BUILD_BASE)/*.d

flash: all
	@st-flash --reset write $(BIN_DIR)/$(TARGET).bin 0x8000000


run: flash
	stty -F /dev/ttyUSB0 115200 cs8 cread clocal
	cat /dev/ttyUSB0


startgdb:
	st-util -m &
	sleep 1

stopgdb:
	killall st-util

debug: startgdb
	$(GDB) --args $(BIN_DIR)/$(TARGET).elf target extended remote :4242 b main
	killall st-util

idedebug: startgdb
	qtcreator -debug $(BIN_DIR)/$(TARGET).elf,server=:4242 ./minidtn.creator
	killall st-util
