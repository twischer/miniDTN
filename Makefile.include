TARGET:=FreeRTOS
# TODO change to your ARM gcc toolchain path
TOOLCHAIN_ROOT:=/usr
TOOLCHAIN_PATH:=$(TOOLCHAIN_ROOT)/bin
TOOLCHAIN_PREFIX:=arm-none-eabi

# Optimization level, can be [0, 1, 2, 3, s].
# TODO use s
OPTLVL:=0
DBG:=-g

FREERTOS:=$(ROOT_DIR)/FreeRTOS
STARTUP:=$(ROOT_DIR)/hardware

# TODO remove contiki lib, if everything was ported successfully
MODULES+= hardware \
	Libraries \
	Libraries/ub_lib \
	cpu/avr/radio/rf230bb \
	core/lib \
	core/net \
	core/net/uDTN

INC_DIRS+= $(MODULES) \
	Libraries \
	core \
	core/net/mac \
	cpu/arm/stm32f103 \
	platform/inga

LINKER_SCRIPT:=$(ROOT_DIR)/Utilities/stm32_flash.ld


INCLUDE+=-I$(FREERTOS)/include
INCLUDE+=-I$(FREERTOS)/portable/GCC/ARM_CM4F
INCLUDE+=-I$(ROOT_DIR)/Libraries/CMSIS/Device/ST/STM32F4xx/Include
INCLUDE+=-I$(ROOT_DIR)/Libraries/CMSIS/Include
INCLUDE+=-I$(ROOT_DIR)/Libraries/STM32F4xx_StdPeriph_Driver/inc
INCLUDE+=-I$(ROOT_DIR)/Libraries/ub_lib
INCLUDE+=-I$(ROOT_DIR)/config

SRC_DIRS:= $(addprefix $(ROOT_DIR)/,$(MODULES))
INCLUDE+= $(addprefix -I$(ROOT_DIR)/,$(INC_DIRS))


BUILD_BASE = $(CURDIR)/build
BIN_DIR = $(CURDIR)/binary

BUILD_DIR := $(addprefix $(BUILD_BASE)/,$(MODULES))

# vpath is used so object files are written to the current directory instead
# of the same directory as their source files
vpath %.c $(ROOT_DIR)/Libraries/STM32F4xx_StdPeriph_Driver/src \
	  $(ROOT_DIR)/Libraries/syscall $(FREERTOS) \
	  $(FREERTOS)/portable/MemMang $(FREERTOS)/portable/GCC/ARM_CM4F \
	  $(ROOT_DIR)/Libraries/ub_lib \
	  $(ROOT_DIR)/core/net/mac/ \
	  $(SRC_DIRS)
	  

vpath %.s $(STARTUP)
ASRC=startup_stm32f4xx.s

# Project Source Files
SRC+=syscalls.c

# FreeRTOS Source Files
SRC+=port.c
SRC+=list.c
SRC+=queue.c
SRC+=tasks.c
SRC+=event_groups.c
SRC+=timers.c
SRC+=heap_4.c

# Standard Peripheral Source Files
SRC+=stm32f4xx_syscfg.c
SRC+=misc.c
SRC+=stm32f4xx_adc.c
SRC+=stm32f4xx_dac.c
SRC+=stm32f4xx_dma.c
SRC+=stm32f4xx_exti.c
SRC+=stm32f4xx_flash.c
SRC+=stm32f4xx_gpio.c
SRC+=stm32f4xx_i2c.c
SRC+=stm32f4xx_rcc.c
SRC+=stm32f4xx_spi.c
SRC+=stm32f4xx_tim.c
SRC+=stm32f4xx_usart.c
SRC+=stm32f4xx_rng.c


# needed contiki mac files
SRC+=mac.c
SRC+=mac-sequence.c
SRC+=nullrdc.c
SRC+=frame802154.c
SRC+=framer.c
SRC+=framer-802154.c

# miniDTN files
SRC+= $(foreach sdir,$(MODULES),$(wildcard $(sdir)/*.c))



CDEFS=-DUSE_STDPERIPH_DRIVER
CDEFS+=-DSTM32F4XX
CDEFS+=-DHSE_VALUE=8000000
CDEFS+=-D__FPU_PRESENT=1
CDEFS+=-D__FPU_USED=1
CDEFS+=-DARM_MATH_CM4

# Contiki definitions from old inga platform with an atmega128
CDEFS+=-DNETSTACK_CONF_WITH_DTN=1
CDEFS+=-DUIP_CONF_IPV6_RPL=0
CDEFS+=-DINGA_CONF_REVISION=INGA_V14

# TODO eemprom not suported at this time
#CDEFS+=-DCONTIKI_CONF_SETTINGS_MANAGER=1

CDEFS+=-DAUTO_CRC_PADDING=2
CDEFS+=-DRF230BB
CDEFS+=-DCONTIKI=1
CDEFS+=-DINGA_BOOTSCREEN_NETSTACK
CDEFS+=-DINGA_BOOTSCREEN
CDEFS+=-DINGA_BOOTSCREEN_RADIO


MCUFLAGS=-mcpu=cortex-m4 -mthumb -mfloat-abi=hard
COMMONFLAGS=-O$(OPTLVL) $(DBG) -Wall -MMD -std=gnu11
CFLAGS+=$(COMMONFLAGS) $(MCUFLAGS) $(INCLUDE) $(CDEFS)
LDLIBS=$(TOOLCHAIN_ROOT)/arm-none-eabi/lib/armv7e-m/fpu/libc_nano.a $(TOOLCHAIN_ROOT)/arm-none-eabi/lib/armv7e-m/fpu/libm.a
LDFLAGS=$(COMMONFLAGS) -fno-exceptions -ffunction-sections -fdata-sections -nostartfiles -Wl,--gc-sections,-T$(LINKER_SCRIPT)

CC=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-gcc
LD=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-gcc
OBJCOPY=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-objcopy
AS=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-as
AR=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-ar
GDB=$(TOOLCHAIN_PATH)/$(TOOLCHAIN_PREFIX)-gdb

OBJ = $(SRC:%.c=$(BUILD_BASE)/%.o)

$(BUILD_BASE)/%.o: %.c
	@echo [CC] $(notdir $<)
	@$(CC) $(CFLAGS) $< -c -o $@


all: checkdirs $(OBJ)
	@echo [AS] $(ASRC)
	@$(AS) -o $(ASRC:%.s=$(BUILD_BASE)/%.o) $(STARTUP)/$(ASRC)
	@echo [LD] $(TARGET).elf
	@$(CC) -o $(BIN_DIR)/$(TARGET).elf $(LDFLAGS) $(OBJ) $(ASRC:%.s=$(BUILD_BASE)/%.o) $(LDLIBS)
	@echo [OBJCOPY] $(TARGET).hex
	@$(OBJCOPY) -O ihex $(BIN_DIR)/$(TARGET).elf $(BIN_DIR)/$(TARGET).hex
	@echo [OBJCOPY] $(TARGET).bin
	@$(OBJCOPY) -O binary $(BIN_DIR)/$(TARGET).elf $(BIN_DIR)/$(TARGET).bin


checkdirs: $(BUILD_DIR) $(BIN_DIR)
	@echo $(SRC)


$(BUILD_DIR) $(BIN_DIR):
	$(Q) mkdir -p $@


.PHONY: clean

clean:
	@echo [RM] OBJ
	@rm -f $(OBJ)
	@rm -f $(ASRC:%.s=$(BUILD_BASE)/%.o)
	@echo [RM] BIN
	@rm -f $(BIN_DIR)/$(TARGET).elf
	@rm -f $(BIN_DIR)/$(TARGET).hex
	@rm -f $(BIN_DIR)/$(TARGET).bin

flash: all
	@st-flash --reset write $(BIN_DIR)/$(TARGET).bin 0x8000000


run: flash
	stty -F /dev/ttyUSB0 115200 cs8 cread clocal
	cat /dev/ttyUSB0


startgdb:
	st-util -m &
	sleep 1

stopgdb:
	killall st-util

debug: startgdb
	$(GDB) --args $(BIN_DIR)/$(TARGET).elf target extended remote :4242 b main
	killall st-util

idedebug: startgdb
	qtcreator -debug $(BIN_DIR)/$(TARGET).elf,server=:4242 ./minidtn.creator
	killall st-util
